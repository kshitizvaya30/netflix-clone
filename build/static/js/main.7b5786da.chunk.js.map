{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","navAvatar.png","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","nmae","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","nav_avatar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b5786da.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n///base url to make requests to the movie database\r\nconst instance = axios.create({\r\n    baseURL: \"http://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, {useState,useEffect} from 'react'\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\r\nconst Row = ({title,fetchUrl,isLargeRow}) => {\r\n\r\n    const[movies,setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    //A snippet of code that runs based on a specific condition/variable\r\n    useEffect(() => {\r\n        //if we leave the bracket empty [] , that means run once when the row loads and dont run again\r\n        //if something is writte like[movies] , every time movies changes it will run\r\n    \r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            //\"http://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\",\r\n            setMovies(request.data.results);\r\n            return request; \r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '640',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        }\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl('');\r\n        }else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n                const urlParams =new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {/* //title */}\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {/* several row posters */}\r\n                {movies.map(movie => (\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick = { () => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path :movie.backdrop_path }`}\r\n                        alt ={movie.name}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            {trailerUrl &&<Youtube videoId={trailerUrl} opts={opts} /> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"df2f3235f0ca54eafedfdbb45012c74a\";\r\n\r\nconst requests = {\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React , {useEffect,useState} from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './banner.css';\r\n\r\nfunction Banner() {\r\n\r\n    const[movie,setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchData(){\r\n            const request = await  axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[Math.floor(Math.random() * (request.data.results.length-1))]\r\n            );\r\n                \r\n            return request;\r\n        }\r\n        fetchData();\r\n        \r\n    }, []);\r\n\r\n    function truncate(str , n){\r\n        return str?.length > n ? str.substr(0,n-1) + \"...\" : str ;\r\n    };\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize:\"cover\",\r\n                backgroundImage: `url(\"http://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundPosition:\"center center\",\r\n            }}\r\n        >\r\n            {/*backgroungImage*/}\r\n            <div className=\"banner_contents\">\r\n                {/* Title */}\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.nmae || movie?.original_name}</h1>    \r\n                {/*2 buttons*/}\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                {/*description*/}\r\n                <h1 className=\"banner_description\">{truncate(movie?.overview ,150)}</h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner;","export default __webpack_public_path__ + \"static/media/navAvatar.942e087d.png\";","import React , {useEffect,useState} from 'react';\r\nimport './Navbar.css';\r\nimport nav_avatar from './navAvatar.png';\r\n\r\nconst Navbar = () => {\r\n\r\n    const[show,handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",() => {\r\n            if(window.scrollY > 80){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav_logo\" src =\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix-Logo\"/>\r\n            <img className=\"nav_avatar\" src={nav_avatar} alt=\"nav-avatar\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Navbar from './Navbar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Navbar */}\n      \n      {/* Banner */}\n      <Navbar />\n      <Banner />    \n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true}/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending } />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated } />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies } />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies } />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies } />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies } />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries } />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}